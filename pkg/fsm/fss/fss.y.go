// Code generated by goyacc -o fss.y.go -p fss fss.y. DO NOT EDIT.

//line fss.y:8
package fss

import __yyfmt__ "fmt"

//line fss.y:8

import "strings"

var (
	print  = __yyfmt__.Print
	printf = __yyfmt__.Printf
)

//line fss.y:20
type fssSymType struct {
	yys int
	// flow
	Flow        string
	Steps       []Step
	_step       Step
	_return     Return
	_returns    Returns
	_action     Action
	_string     string
	_identifier string
	_list       []interface{}
	_args       []Param
	_param      Param
	_dict       map[string]interface{}
	_variable   string
	_number     int64
	_secret     map[string]string

	// action
	ActionStatement
	_addr  []string
	_capem string
	_type  ActionMethodType
	_grpc  ActionMethodType
	_http  ActionMethodType
	_https ActionMethodType
}

const ILLEGAL = 57346
const EOL = 57347
const IDENTIFIER = 57348
const NUMBER_VALUE = 57349
const ID = 57350
const STRING_VALUE = 57351
const LIST = 57352
const DICT = 57353
const FLOW = 57354
const FLOW_END = 57355
const STEP = 57356
const ACTION = 57357
const ARGS = 57358
const DECI = 57359
const ACTION_END = 57360
const ADDR = 57361
const METHOD = 57362
const FLOW_RUN = 57363
const FLOW_RUN_END = 57364
const RETURN = 57365
const HTTPS = 57366
const SECRET = 57367
const CAPEM = 57368
const LPAREN = 57369
const RPAREN = 57370
const LSQUARE = 57371
const RSQUARE = 57372
const LCURLY = 57373
const RCURLY = 57374
const SEMICOLON = 57375
const COMMA = 57376
const COLON = 57377
const HTTP = 57378
const GRPC = 57379
const INT = 57380
const STR = 57381
const ASSIGN = 57382
const OR = 57383
const AND = 57384
const TO = 57385
const DEST = 57386

var fssToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"ILLEGAL",
	"EOL",
	"IDENTIFIER",
	"NUMBER_VALUE",
	"ID",
	"STRING_VALUE",
	"LIST",
	"DICT",
	"FLOW",
	"FLOW_END",
	"STEP",
	"ACTION",
	"ARGS",
	"DECI",
	"ACTION_END",
	"ADDR",
	"METHOD",
	"FLOW_RUN",
	"FLOW_RUN_END",
	"RETURN",
	"HTTPS",
	"SECRET",
	"CAPEM",
	"LPAREN",
	"RPAREN",
	"LSQUARE",
	"RSQUARE",
	"LCURLY",
	"RCURLY",
	"SEMICOLON",
	"COMMA",
	"COLON",
	"HTTP",
	"GRPC",
	"INT",
	"STR",
	"ASSIGN",
	"OR",
	"AND",
	"TO",
	"DEST",
}

var fssStatenames = [...]string{}

const fssEofCode = 1
const fssErrCode = 2
const fssInitialStackSize = 16

//line fss.y:307

//line yacctab:1
var fssExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
}

const fssPrivate = 57344

const fssLast = 155

var fssAct = [...]int{
	136, 129, 103, 80, 59, 76, 48, 97, 47, 36,
	46, 45, 44, 102, 95, 140, 104, 128, 127, 104,
	105, 106, 130, 105, 106, 55, 138, 96, 109, 107,
	65, 52, 51, 40, 28, 138, 134, 53, 54, 42,
	132, 124, 123, 101, 100, 99, 98, 50, 135, 57,
	61, 62, 63, 58, 137, 92, 89, 66, 87, 73,
	72, 71, 108, 137, 56, 75, 77, 82, 83, 84,
	85, 37, 81, 122, 121, 60, 70, 68, 90, 38,
	49, 23, 23, 7, 24, 24, 6, 91, 39, 25,
	21, 17, 5, 27, 79, 31, 23, 26, 86, 24,
	110, 43, 30, 23, 74, 64, 24, 112, 126, 125,
	38, 14, 94, 141, 16, 142, 29, 120, 41, 118,
	119, 15, 117, 111, 19, 20, 18, 81, 116, 114,
	131, 115, 113, 34, 32, 78, 35, 33, 139, 13,
	11, 9, 12, 10, 8, 133, 93, 22, 88, 67,
	69, 4, 3, 2, 1,
}

var fssPact = [...]int{
	71, -1000, -1000, -1000, -1000, 135, 134, 133, -1000, -1000,
	72, 72, -1000, -1000, 68, 67, 73, -6, 73, 89,
	82, -1000, -1000, 128, 127, -1000, 63, -7, 109, 63,
	-1000, -1000, -31, -32, -33, -35, 57, 94, -8, -9,
	1, 31, 57, 94, 48, 48, 48, 48, 87, -10,
	57, 50, 49, 28, 27, 26, -1000, 86, 57, 35,
	66, 35, 35, 35, -1000, 48, 80, 25, -1000, 23,
	52, -1000, -1000, -1000, -1000, 69, 22, 97, -14, -1000,
	-1000, -37, 13, 12, 11, 10, -1000, -1000, -15, -1000,
	-11, -1000, -1000, 30, -12, -1000, 121, 117, -1000, -1000,
	-1000, -1000, -1000, -1000, -18, 123, 122, 113, -1000, 111,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 46, 45, 9,
	8, -1000, -1000, 93, 92, -22, -23, -5, -5, 7,
	-1000, 3, -1000, 20, -1000, -1000, -1000, 29, -25, -1000,
	106, -1000, -1000,
}

var fssPgo = [...]int{
	0, 154, 153, 152, 151, 114, 97, 9, 6, 71,
	150, 149, 148, 2, 4, 111, 147, 5, 146, 1,
	145, 0, 135, 3,
}

var fssR1 = [...]int{
	0, 1, 1, 1, 3, 3, 3, 3, 5, 5,
	6, 6, 6, 6, 9, 10, 10, 10, 7, 7,
	11, 12, 12, 13, 13, 13, 13, 13, 8, 4,
	4, 2, 2, 15, 15, 16, 16, 16, 16, 17,
	18, 18, 18, 18, 19, 20, 20, 21, 21, 21,
	14, 14, 22, 22, 23, 23,
}

var fssR2 = [...]int{
	0, 1, 1, 1, 7, 7, 8, 8, 0, 4,
	0, 4, 4, 4, 4, 0, 5, 5, 0, 4,
	3, 0, 2, 2, 2, 2, 2, 2, 4, 4,
	4, 4, 4, 0, 2, 6, 6, 6, 6, 3,
	8, 8, 4, 4, 3, 0, 2, 2, 3, 3,
	3, 2, 1, 3, 3, 1,
}

var fssChk = [...]int{
	-1000, -1, -2, -3, -4, 21, 15, 12, 9, 6,
	9, 6, 9, 6, -15, -15, -5, 19, -5, -15,
	-15, 22, -16, 14, 17, 22, -6, 20, 40, -6,
	13, 13, 6, 9, 6, 9, -7, -9, 16, 25,
	40, 9, -7, -9, 43, 43, 43, 43, -8, 23,
	-7, 40, 40, 36, 37, 24, 33, -8, -7, -14,
	27, -14, -14, -14, 18, 40, -8, -11, 27, -10,
	27, 33, 33, 33, 18, -8, -17, 31, -22, 28,
	-23, 6, -17, -17, -17, -14, 18, 33, -12, 33,
	26, 18, 33, -18, 15, 28, 41, 44, 33, 33,
	33, 33, 28, -13, 34, 38, 39, 40, 32, 40,
	-23, 6, -13, 9, 6, 9, 6, 9, 6, 9,
	6, 28, 28, 33, 33, 16, 16, 40, 40, -19,
	27, -19, 33, -20, 33, 28, -21, 34, 6, -21,
	40, 7, 9,
}

var fssDef = [...]int{
	0, -2, 1, 2, 3, 0, 0, 0, 33, 33,
	8, 8, 33, 33, 0, 0, 10, 0, 10, 0,
	0, 31, 34, 0, 0, 32, 18, 0, 0, 18,
	29, 30, 0, 0, 0, 0, 0, 18, 0, 0,
	0, 0, 0, 18, 0, 0, 0, 0, 0, 0,
	0, 0, 15, 0, 0, 0, 9, 0, 0, 0,
	0, 0, 0, 0, 4, 0, 0, 0, 21, 0,
	0, 11, 12, 13, 5, 0, 0, 0, 0, 51,
	52, 55, 0, 0, 0, 0, 6, 19, 0, 14,
	0, 7, 35, 0, 0, 50, 0, 0, 37, 36,
	38, 28, 20, 22, 0, 0, 0, 0, 39, 0,
	53, 54, 23, 24, 26, 25, 27, 0, 0, 0,
	0, 16, 17, 42, 43, 0, 0, 0, 0, 0,
	45, 0, 40, 0, 41, 44, 46, 0, 0, 47,
	0, 48, 49,
}

var fssTok1 = [...]int{
	1,
}

var fssTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44,
}

var fssTok3 = [...]int{
	0,
}

var fssErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	fssDebug        = 0
	fssErrorVerbose = false
)

type fssLexer interface {
	Lex(lval *fssSymType) int
	Error(s string)
}

type fssParser interface {
	Parse(fssLexer) int
	Lookahead() int
}

type fssParserImpl struct {
	lval  fssSymType
	stack [fssInitialStackSize]fssSymType
	char  int
}

func (p *fssParserImpl) Lookahead() int {
	return p.char
}

func fssNewParser() fssParser {
	return &fssParserImpl{}
}

const fssFlag = -1000

func fssTokname(c int) string {
	if c >= 1 && c-1 < len(fssToknames) {
		if fssToknames[c-1] != "" {
			return fssToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func fssStatname(s int) string {
	if s >= 0 && s < len(fssStatenames) {
		if fssStatenames[s] != "" {
			return fssStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func fssErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !fssErrorVerbose {
		return "syntax error"
	}

	for _, e := range fssErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + fssTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := fssPact[state]
	for tok := TOKSTART; tok-1 < len(fssToknames); tok++ {
		if n := base + tok; n >= 0 && n < fssLast && fssChk[fssAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if fssDef[state] == -2 {
		i := 0
		for fssExca[i] != -1 || fssExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; fssExca[i] >= 0; i += 2 {
			tok := fssExca[i]
			if tok < TOKSTART || fssExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if fssExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += fssTokname(tok)
	}
	return res
}

func fsslex1(lex fssLexer, lval *fssSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = fssTok1[0]
		goto out
	}
	if char < len(fssTok1) {
		token = fssTok1[char]
		goto out
	}
	if char >= fssPrivate {
		if char < fssPrivate+len(fssTok2) {
			token = fssTok2[char-fssPrivate]
			goto out
		}
	}
	for i := 0; i < len(fssTok3); i += 2 {
		token = fssTok3[i+0]
		if token == char {
			token = fssTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = fssTok2[1] /* unknown char */
	}
	if fssDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", fssTokname(token), uint(char))
	}
	return char, token
}

func fssParse(fsslex fssLexer) int {
	return fssNewParser().Parse(fsslex)
}

func (fssrcvr *fssParserImpl) Parse(fsslex fssLexer) int {
	var fssn int
	var fssVAL fssSymType
	var fssDollar []fssSymType
	_ = fssDollar // silence set and not used
	fssS := fssrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	fssstate := 0
	fssrcvr.char = -1
	fsstoken := -1 // fssrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		fssstate = -1
		fssrcvr.char = -1
		fsstoken = -1
	}()
	fssp := -1
	goto fssstack

ret0:
	return 0

ret1:
	return 1

fssstack:
	/* put a state and value onto the stack */
	if fssDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", fssTokname(fsstoken), fssStatname(fssstate))
	}

	fssp++
	if fssp >= len(fssS) {
		nyys := make([]fssSymType, len(fssS)*2)
		copy(nyys, fssS)
		fssS = nyys
	}
	fssS[fssp] = fssVAL
	fssS[fssp].yys = fssstate

fssnewstate:
	fssn = fssPact[fssstate]
	if fssn <= fssFlag {
		goto fssdefault /* simple state */
	}
	if fssrcvr.char < 0 {
		fssrcvr.char, fsstoken = fsslex1(fsslex, &fssrcvr.lval)
	}
	fssn += fsstoken
	if fssn < 0 || fssn >= fssLast {
		goto fssdefault
	}
	fssn = fssAct[fssn]
	if fssChk[fssn] == fsstoken { /* valid shift */
		fssrcvr.char = -1
		fsstoken = -1
		fssVAL = fssrcvr.lval
		fssstate = fssn
		if Errflag > 0 {
			Errflag--
		}
		goto fssstack
	}

fssdefault:
	/* default state action */
	fssn = fssDef[fssstate]
	if fssn == -2 {
		if fssrcvr.char < 0 {
			fssrcvr.char, fsstoken = fsslex1(fsslex, &fssrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if fssExca[xi+0] == -1 && fssExca[xi+1] == fssstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			fssn = fssExca[xi+0]
			if fssn < 0 || fssn == fsstoken {
				break
			}
		}
		fssn = fssExca[xi+1]
		if fssn < 0 {
			goto ret0
		}
	}
	if fssn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			fsslex.Error(fssErrorMessage(fssstate, fsstoken))
			Nerrs++
			if fssDebug >= 1 {
				__yyfmt__.Printf("%s", fssStatname(fssstate))
				__yyfmt__.Printf(" saw %s\n", fssTokname(fsstoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for fssp >= 0 {
				fssn = fssPact[fssS[fssp].yys] + fssErrCode
				if fssn >= 0 && fssn < fssLast {
					fssstate = fssAct[fssn] /* simulate a shift of "error" */
					if fssChk[fssstate] == fssErrCode {
						goto fssstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if fssDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", fssS[fssp].yys)
				}
				fssp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if fssDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", fssTokname(fsstoken))
			}
			if fsstoken == fssEofCode {
				goto ret1
			}
			fssrcvr.char = -1
			fsstoken = -1
			goto fssnewstate /* try again in the same state */
		}
	}

	/* reduction by production fssn */
	if fssDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", fssn, fssStatname(fssstate))
	}

	fssnt := fssn
	fsspt := fssp
	_ = fsspt // guard against "declared and not used"

	fssp -= fssR2[fssn]
	// fssp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if fssp+1 >= len(fssS) {
		nyys := make([]fssSymType, len(fssS)*2)
		copy(nyys, fssS)
		fssS = nyys
	}
	fssVAL = fssS[fssp+1]

	/* consult goto table to find next state */
	fssn = fssR1[fssn]
	fssg := fssPgo[fssn]
	fssj := fssg + fssS[fssp].yys + 1

	if fssj >= fssLast {
		fssstate = fssAct[fssg]
	} else {
		fssstate = fssAct[fssj]
		if fssChk[fssstate] != -fssn {
			fssstate = fssAct[fssg]
		}
	}
	// dummy call; replaced with literal code
	switch fssnt {

	case 1:
		fssDollar = fssS[fsspt-1 : fsspt+1]
//line fss.y:69
		{
			flowRunSymPoolPut(fssDollar[1].Flow, fssDollar[1])
		}
	case 2:
		fssDollar = fssS[fsspt-1 : fsspt+1]
//line fss.y:73
		{
			actionSymPoolPut(fssDollar[1].ActionStatement.Name, fssDollar[1])
		}
	case 3:
		fssDollar = fssS[fsspt-1 : fsspt+1]
//line fss.y:77
		{
			flowSymPoolPut(fssDollar[1].Flow, fssDollar[1])
		}
	case 4:
		fssDollar = fssS[fsspt-7 : fsspt+1]
//line fss.y:84
		{
			fssVAL.ActionStatement = ActionStatement{
				Name:    fssDollar[2]._string,
				Addr:    fssDollar[3]._addr,
				Type:    fssDollar[4]._type,
				Args:    fssDollar[5]._args,
				Returns: fssDollar[6]._returns,
			}
		}
	case 5:
		fssDollar = fssS[fsspt-7 : fsspt+1]
//line fss.y:95
		{
			fssVAL.ActionStatement = ActionStatement{
				Name:    fssDollar[2]._identifier,
				Addr:    fssDollar[3]._addr,
				Type:    fssDollar[4]._type,
				Args:    fssDollar[5]._args,
				Returns: fssDollar[6]._returns,
			}
		}
	case 6:
		fssDollar = fssS[fsspt-8 : fsspt+1]
//line fss.y:106
		{
			fssVAL.ActionStatement = ActionStatement{
				Name:    fssDollar[2]._string,
				Addr:    fssDollar[3]._addr,
				Type:    fssDollar[4]._type,
				Secret:  fssDollar[5]._secret,
				Args:    fssDollar[6]._args,
				Returns: fssDollar[7]._returns,
			}
		}
	case 7:
		fssDollar = fssS[fsspt-8 : fsspt+1]
//line fss.y:118
		{
			fssVAL.ActionStatement = ActionStatement{
				Name:    fssDollar[2]._identifier,
				Addr:    fssDollar[3]._addr,
				Type:    fssDollar[4]._type,
				Secret:  fssDollar[5]._secret,
				Args:    fssDollar[6]._args,
				Returns: fssDollar[7]._returns,
			}
		}
	case 9:
		fssDollar = fssS[fsspt-4 : fsspt+1]
//line fss.y:131
		{
			fssVAL._addr = append(fssVAL._addr, strings.Split(strings.Trim(fssDollar[3]._string, "\""), ",")...)
		}
	case 11:
		fssDollar = fssS[fsspt-4 : fsspt+1]
//line fss.y:135
		{
			fssVAL._type = fssDollar[3]._http
		}
	case 12:
		fssDollar = fssS[fsspt-4 : fsspt+1]
//line fss.y:136
		{
			fssVAL._type = fssDollar[3]._grpc
		}
	case 13:
		fssDollar = fssS[fsspt-4 : fsspt+1]
//line fss.y:137
		{
			fssVAL._type = fssDollar[3]._https
		}
	case 14:
		fssDollar = fssS[fsspt-4 : fsspt+1]
//line fss.y:142
		{
			fssVAL._secret = make(map[string]string)
			fssVAL._secret["capem"] = fssDollar[3]._capem
		}
	case 16:
		fssDollar = fssS[fsspt-5 : fsspt+1]
//line fss.y:149
		{
			fssVAL._capem = fssDollar[4]._string
		}
	case 17:
		fssDollar = fssS[fsspt-5 : fsspt+1]
//line fss.y:153
		{
			fssVAL._capem = fssDollar[4]._identifier
		}
	case 19:
		fssDollar = fssS[fsspt-4 : fsspt+1]
//line fss.y:160
		{
			fssVAL._args = fssDollar[3]._args
		}
	case 20:
		fssDollar = fssS[fsspt-3 : fsspt+1]
//line fss.y:165
		{
			fssVAL = fssDollar[2]
		}
	case 22:
		fssDollar = fssS[fsspt-2 : fsspt+1]
//line fss.y:169
		{
			fssVAL._args = append(fssVAL._args, fssDollar[2]._param)
		}
	case 23:
		fssDollar = fssS[fsspt-2 : fsspt+1]
//line fss.y:173
		{
			fssVAL._param = fssDollar[2]._param
		}
	case 24:
		fssDollar = fssS[fsspt-2 : fsspt+1]
//line fss.y:174
		{
			fssVAL._param = Param{Name: fssDollar[2]._string, ParamType: NumberType}
		}
	case 25:
		fssDollar = fssS[fsspt-2 : fsspt+1]
//line fss.y:175
		{
			fssVAL._param = Param{Name: fssDollar[2]._string, ParamType: StringType}
		}
	case 26:
		fssDollar = fssS[fsspt-2 : fsspt+1]
//line fss.y:176
		{
			fssVAL._param = Param{Name: fssDollar[2]._identifier, ParamType: NumberType}
		}
	case 27:
		fssDollar = fssS[fsspt-2 : fsspt+1]
//line fss.y:177
		{
			fssVAL._param = Param{Name: fssDollar[2]._identifier, ParamType: StringType}
		}
	case 28:
		fssDollar = fssS[fsspt-4 : fsspt+1]
//line fss.y:182
		{
			fssVAL._returns = fssDollar[3]._returns
		}
	case 29:
		fssDollar = fssS[fsspt-4 : fsspt+1]
//line fss.y:189
		{
			fssVAL.Flow = fssDollar[2]._string
			fssVAL.Steps = fssDollar[3].Steps
		}
	case 30:
		fssDollar = fssS[fsspt-4 : fsspt+1]
//line fss.y:194
		{
			fssVAL.Flow = fssDollar[2]._identifier
			fssVAL.Steps = fssDollar[3].Steps
		}
	case 31:
		fssDollar = fssS[fsspt-4 : fsspt+1]
//line fss.y:201
		{
			fssVAL.Flow = fssDollar[2]._string
			fssVAL.Steps = fssDollar[3].Steps
		}
	case 32:
		fssDollar = fssS[fsspt-4 : fsspt+1]
//line fss.y:206
		{
			fssVAL.Flow = fssDollar[2]._identifier
			fssVAL.Steps = fssDollar[3].Steps
		}
	case 34:
		fssDollar = fssS[fsspt-2 : fsspt+1]
//line fss.y:214
		{
			fssVAL.Steps = append(fssVAL.Steps, fssDollar[2]._step)
		}
	case 35:
		fssDollar = fssS[fsspt-6 : fsspt+1]
//line fss.y:221
		{
			fssVAL._step = Step{Name: fssDollar[2]._identifier, Action: fssDollar[5]._action, Returns: fssDollar[4]._returns, StepType: Normal}
		}
	case 36:
		fssDollar = fssS[fsspt-6 : fsspt+1]
//line fss.y:225
		{
			fssVAL._step = Step{Name: fssDollar[2]._identifier, Action: fssDollar[5]._action, Returns: fssDollar[4]._returns, StepType: Decision}
		}
	case 37:
		fssDollar = fssS[fsspt-6 : fsspt+1]
//line fss.y:229
		{
			fssVAL._step = Step{Name: fssDollar[2]._string, Action: fssDollar[5]._action, Returns: fssDollar[4]._returns, StepType: Normal}
		}
	case 38:
		fssDollar = fssS[fsspt-6 : fsspt+1]
//line fss.y:233
		{
			fssVAL._step = Step{Name: fssDollar[2]._string, Action: fssDollar[5]._action, Returns: fssDollar[4]._returns, StepType: Decision}
		}
	case 39:
		fssDollar = fssS[fsspt-3 : fsspt+1]
//line fss.y:239
		{
			fssVAL = fssDollar[2]
		}
	case 40:
		fssDollar = fssS[fsspt-8 : fsspt+1]
//line fss.y:244
		{
			fssVAL._action = Action{Name: fssDollar[3]._string, Args: fssDollar[7]._args}
		}
	case 41:
		fssDollar = fssS[fsspt-8 : fsspt+1]
//line fss.y:249
		{
			fssVAL._action = Action{Name: fssDollar[3]._identifier, Args: fssDollar[7]._args}
		}
	case 42:
		fssDollar = fssS[fsspt-4 : fsspt+1]
//line fss.y:254
		{
			fssVAL._action = Action{Name: fssDollar[3]._string}
		}
	case 43:
		fssDollar = fssS[fsspt-4 : fsspt+1]
//line fss.y:259
		{
			fssVAL._action = Action{Name: fssDollar[3]._identifier}
		}
	case 44:
		fssDollar = fssS[fsspt-3 : fsspt+1]
//line fss.y:265
		{
			fssVAL = fssDollar[2]
		}
	case 46:
		fssDollar = fssS[fsspt-2 : fsspt+1]
//line fss.y:270
		{
			fssVAL._args = append(fssVAL._args, fssDollar[2]._param)
		}
	case 47:
		fssDollar = fssS[fsspt-2 : fsspt+1]
//line fss.y:276
		{
			fssVAL._param = fssDollar[2]._param
		}
	case 48:
		fssDollar = fssS[fsspt-3 : fsspt+1]
//line fss.y:277
		{
			fssVAL._param = Param{Name: fssDollar[1]._identifier, ParamType: NumberType, Value: fssDollar[3]._number}
		}
	case 49:
		fssDollar = fssS[fsspt-3 : fsspt+1]
//line fss.y:278
		{
			fssVAL._param = Param{Name: fssDollar[1]._identifier, ParamType: StringType, Value: fssDollar[3]._string}
		}
	case 50:
		fssDollar = fssS[fsspt-3 : fsspt+1]
//line fss.y:282
		{
			fssVAL = fssDollar[2]
		}
	case 51:
		fssDollar = fssS[fsspt-2 : fsspt+1]
//line fss.y:283
		{
			fssVAL._returns = append(fssVAL._returns, Return{State: "DONE", Next: ""})
		}
	case 52:
		fssDollar = fssS[fsspt-1 : fsspt+1]
//line fss.y:288
		{
			fssVAL._returns = append(fssVAL._returns, fssDollar[1]._return)
		}
	case 53:
		fssDollar = fssS[fsspt-3 : fsspt+1]
//line fss.y:292
		{
			fssVAL._returns = append(fssVAL._returns, fssDollar[3]._return)
		}
	case 54:
		fssDollar = fssS[fsspt-3 : fsspt+1]
//line fss.y:298
		{
			fssVAL._return = Return{State: fssDollar[1]._identifier, Next: fssDollar[3]._identifier}
		}
	case 55:
		fssDollar = fssS[fsspt-1 : fsspt+1]
//line fss.y:302
		{
			fssVAL._return = Return{State: fssDollar[1]._identifier}
		}
	}
	goto fssstack /* stack new state and value */
}
